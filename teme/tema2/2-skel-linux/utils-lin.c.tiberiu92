/**
 * Operating Sytems 2013 - Assignment 2
 *
 */

#include <assert.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <sys/types.h>
#include <sys/stat.h>
#include <sys/wait.h>

#include <fcntl.h>
#include <unistd.h>

#include "utils.h"

#define READ		0
#define WRITE		1


/**
 * Internal change-directory command.
 */
static bool shell_cd(word_t *dir) 
{

	int rc;
	const char *folder_path;

	folder_path = dir->string;

	/**
	 * "cd" or "cd ~" -> change directory to home;
	 * "cd folder_path" -> change directory to folder_path;
	 */

	if(folder_path == NULL) {
		rc = chdir(getenv("HOME"));

	} else if(strcmp(folder_path, "~") == 0) {
		rc = chdir(getenv("HOME"));

	} else {
		rc = chdir(folder_path);

	}

	if(rc == 0) {
		/* success */
		return true;
	}

	return false;

}

/**
 * Internal exit/quit command.
 */
static int shell_exit() 
{
	return SHELL_EXIT;
}


/**
 * Concatenate parts of the word to obtain the command
 */
static char *get_word(word_t *s)
{
	int string_length = 0;
	int substring_length = 0;

	char *string = NULL;
	char *substring = NULL;

	while (s != NULL) {
		substring = strdup(s->string);

		if (substring == NULL) {
			return NULL;
		}

		if (s->expand == true) {
			char *aux = substring;
			substring = getenv(substring);

			/* prevents strlen from failing */
			if (substring == NULL) {
				substring = calloc(1, sizeof(char));
				if (substring == NULL) {
					free(aux);
					return NULL;
				}
			}

			free(aux);
		}

		substring_length = strlen(substring);

		string = realloc(string, string_length + substring_length + 1);
		if (string == NULL) {
			if (substring != NULL)
				free(substring);
			return NULL;
		}

		memset(string + string_length, 0, substring_length + 1);

		strcat(string, substring);
		string_length += substring_length;

		if (s->expand == false) {
			free(substring);
		}

		s = s->next_part;
	}

	return string;
}

/**
 * Concatenate command arguments in a NULL terminated list in order to pass
 * them directly to execv.
 */
static char **get_argv(simple_command_t *command, int *size)
{
	char **argv;
	word_t *param;

	int argc = 0;
	argv = calloc(argc + 1, sizeof(char *));
	assert(argv != NULL);

	argv[argc] = get_word(command->verb);
	assert(argv[argc] != NULL);

	argc++;

	param = command->params;
	while (param != NULL) {
		argv = realloc(argv, (argc + 1) * sizeof(char *));
		assert(argv != NULL);

		argv[argc] = get_word(param);
		assert(argv[argc] != NULL);

		param = param->next_word;
		argc++;
	}

	argv = realloc(argv, (argc + 1) * sizeof(char *));
	assert(argv != NULL);

	argv[argc] = NULL;
	*size = argc;

	return argv;

}

/**
 * Parse a simple command (internal, environment variable assignment,
 * external command).
 */
static int parse_simple(simple_command_t *s, int level, command_t *father)
{
	
	char **arguments;
	const char *command, *variable, *value;
	int fd, rc, nr_args, status, aux = 0;

	char *input, *output, *error;
	int fd_in, fd_out, fd_err;
	pid_t pid, wait_ret;

	command = get_word(s->verb);

	if(command == NULL) {
		return -1;

	}

	/**
	 * builtin commands are cd (change directory) and quit/exit shell;
	 * if builtin command, execute the command;
	 */

	if(strcmp(command, "quit") == 0 || strcmp(command, "exit") == 0) {
		rc = shell_exit();

	} else if(strcmp(command, "cd") == 0) {

		/**
		 * execute builtin command cd (change directory);
		 */

		if(s->out != NULL) {

			if(s->io_flags == IO_REGULAR) {
				fd = open(get_word(s->out), O_WRONLY | O_CREAT | O_TRUNC, 0644);

			} else if(s->io_flags == IO_OUT_APPEND) {
				fd = open(get_word(s->out), O_WRONLY | O_CREAT | O_APPEND, 0644);

			}	

			dup2(aux, STDOUT_FILENO);
			dup2(fd, aux);		

		}

		rc = shell_cd(s->params);

		if(s->out != NULL) {
			close(fd);
			close(aux);
		}

	/**
	 * environment variable assignment;
	 * assign value to variable;
     * execute the assignment and return the exit status; 
	 */

	} else if((s->verb->next_part != NULL) && (s->verb->next_part->next_part != NULL)
		&& (strcmp(s->verb->next_part->string, "=") == 0)) {

		variable = s->verb->string;
		value = s->verb->next_part->next_part->string;

		rc = setenv(variable, value, 1);

	} else {

		/**
		 * if external command, fork a new process,
		 * perform redirections and execute the command;
		 */

		arguments = get_argv(s, &nr_args);
		pid = fork();

		switch(pid) {
		case -1:
			exit(EXIT_FAILURE);

		case 0:

			/** 
			  * verify the redirection type using io_flags;
			  * io_flags:
			  *		IO_REGULAR -> redirect input, output, error to file (rewrites the file);	
			  *		IO_OUT_APPEND -> redirect output to file (append mode);
			  *		IO_ERR_APPEND -> redirect error to file (append mode);
			  */

			input = get_word(s->in);
			output = get_word(s->out);
			error = get_word(s->err);

			if(input != NULL) {
				fd_in = open(input, O_RDONLY);
				dup2(fd_in, STDIN_FILENO);
				close(fd_in);


			}

			if(output != NULL) {
				if(s->io_flags == IO_REGULAR) {
					fd_out = open(output, O_WRONLY | O_CREAT | O_TRUNC, 0644);

				} else if(s->io_flags == IO_OUT_APPEND) {
					fd_out = open(output, O_WRONLY | O_CREAT | O_APPEND, 0644);

				}

				dup2(fd_out, STDOUT_FILENO);
				close(fd_out);

			}

			if(error != NULL) {

				if(s->io_flags == IO_REGULAR) {
					fd_err = open(error, O_WRONLY | O_CREAT | O_TRUNC, 0644);

				} else if(s->io_flags == IO_ERR_APPEND) {
					fd_err = open(error, O_WRONLY | O_CREAT | O_APPEND, 0644);

				}

				if(output != NULL && strcmp(error, output) == 0)  {
					dup2(fd_err, STDOUT_FILENO);
				}

				dup2(fd_err, STDERR_FILENO);
				close(fd_err);

			}

			/**
			  * execute external command;
			  * if execvp returns 0 - success, else show specific message "Executuin failed for 'command' ";
			  */

			rc = execvp(command, (char* const*) arguments);
			if(rc < 0) {
				fprintf(stderr, "Execution failed for '%s'\n", command);
				fflush(stdout);
				exit(EXIT_FAILURE);

			}

			fflush(stdout);
			exit(EXIT_SUCCESS);

		default:
			/* parent process */
			wait_ret = waitpid(pid, &status, 0);
			DIE(wait_ret < 0, "waitpid");
			rc = WEXITSTATUS(status);

		}
	}

	return rc;
}

/**
 * Process two commands in parallel, by creating two children.
 */
static bool do_in_parallel(command_t *cmd1, command_t *cmd2, int level, command_t *father)
{

	int rc, status, status_1, status_2;
	pid_t pid_1, pid_2, wait_ret;

	pid_1 = fork();

	switch(pid_1) {
	case -1:
		exit(EXIT_FAILURE);

	case 0:
		/* first child of the process executes the first command */
		rc = parse_command(cmd1, level, father);
		exit(rc);

	default:

		/* parent forks another process */
		pid_2 = fork();
		switch(pid_2) {
		case -1:
			exit(EXIT_FAILURE);

		case 0:
			/* the second child of the process executes the second command */
			rc = parse_command(cmd2, level, father);
			exit(rc);
		
		default:
			/* parent waits for the second child to finish */
			wait_ret = waitpid(pid_2, &status, 0);
			DIE(wait_ret < 0, "waitpid");
			status_1 = WEXITSTATUS(status);
		}

		/* parent waits for first child to finish */
		wait_ret = waitpid(pid_1, &status, 0);
		DIE(wait_ret < 0, "waitpid");
		status_2 = WEXITSTATUS(status);

	}

	if(status_1 == 0 && status_2 == 0) {
		return true;

	}

	return false; 

}

/**
 * Run commands by creating an anonymous pipe (cmd1 | cmd2)
 */
static bool do_on_pipe(command_t *cmd1, command_t *cmd2, int level, command_t *father)
{
	
	int rc, status;
	int fd[2];
	pid_t pid;

	/* create a pipe */
	rc = pipe(fd);
	if(rc < 0) {
		fprintf(stderr, "Pipe failed.\n");
		return EXIT_FAILURE;

	}

	/* fork a new process */
	pid = fork();

	switch(pid) {
	case -1:
		/* forked fail */
		exit(EXIT_FAILURE);

	case 0:

		/* close the reading end of the pipe */
		close(fd[0]);

		/* the output of the first command will be redirected into the pipe */
		dup2(fd[1], WRITE);

		/* execute first command */
		rc = parse_command(cmd1, level, father);

		exit(rc);

	default:
		
		/* close the write end of the pipe */
		close(fd[1]);

		/* the second command will read input from the pipe */
		dup2(fd[0], READ);

		/* execute second command */
		rc = parse_command(cmd2, level, father);

		/* close the reading end of the pipe */
		close(fd[0]);

		waitpid(pid, &status, 0);	

	}
	
	return false;

}

/**
 * Parse and execute a command.
 */
int parse_command(command_t *c, int level, command_t *father)
{	

	if(c == NULL) {
		return -1;
	}

	if (c->op == OP_NONE) {

		/* execute a simple command */
		return parse_simple(c->scmd, level, father);

	}

	switch (c->op) {
	case OP_SEQUENTIAL:

		/* execute the commands one after another */
		parse_command(c->cmd1, level + 1, father);
		parse_command(c->cmd2, level + 1, father);

		break;

	case OP_PARALLEL:
		
		/* execute the commands simultaneously */
		do_in_parallel(c->cmd1, c->cmd2, level + 1, father);

		break;

	case OP_CONDITIONAL_NZERO:
		
		/**
		  * execute the second command only if the first one
          * returns non zero 
          */

		if(parse_command(c->cmd1, level + 1, father) != 0) {
			return parse_command(c->cmd2, level + 1, father);

		}

		break;

	case OP_CONDITIONAL_ZERO:

		/**
		  * execute the second command only if the first one
          * returns zero 
          */
		
		if(parse_command(c->cmd1, level + 1, father) == 0) {
			return parse_command(c->cmd2, level + 1, father);

		}

		break;

	case OP_PIPE:

		/**
		 * redirect the output of the first command to the
		 * input of the second 
		 */
		do_on_pipe(c->cmd1, c->cmd2, level + 1, father);

		break;

	default:
		assert(false);

	}

	return 0; 
}

/**
 * Readline from mini-shell.
 */
char *read_line()
{
	char *instr;
	char *chunk;
	char *ret;

	int instr_length;
	int chunk_length;

	int endline = 0;

	instr = NULL;
	instr_length = 0;

	chunk = calloc(CHUNK_SIZE, sizeof(char));
	if (chunk == NULL) {
		fprintf(stderr, ERR_ALLOCATION);
		return instr;
	}

	while (!endline) {
		ret = fgets(chunk, CHUNK_SIZE, stdin);
		if (ret == NULL) {
			break;
		}

		chunk_length = strlen(chunk);
		if (chunk[chunk_length - 1] == '\n') {
			chunk[chunk_length - 1] = 0;
			endline = 1;
		}

		ret = instr;
		instr = realloc(instr, instr_length + CHUNK_SIZE + 1);
		if (instr == NULL) {
			free(ret);
			return instr;
		}
		memset(instr + instr_length, 0, CHUNK_SIZE);
		strcat(instr, chunk);
		instr_length += chunk_length;
	}

	free(chunk);

	return instr;
}
